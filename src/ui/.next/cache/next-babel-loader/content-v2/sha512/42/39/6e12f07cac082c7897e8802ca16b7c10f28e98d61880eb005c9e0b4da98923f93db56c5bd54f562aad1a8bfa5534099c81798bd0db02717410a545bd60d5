{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/pages/index.tsx\";\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport { ApolloClient, InMemoryCache, useMutation } from '@apollo/client';\nimport { filter } from 'graphql-anywhere';\nimport moment from 'moment';\nimport styled from 'styled-components';\nimport Modal, { ModalProvider } from 'styled-react-modal';\nimport { TaskList } from '../components/TaskList/taskList';\nimport { HomePageDocument, TaskListDataFragmentDoc } from '../typedDocumentNodes';\nimport { Flex, Text, Button } from '../primitives';\nimport { NewTaskForm } from '../components/NewTaskForm/newTaskForm';\nimport { ADD_NEW_TASK } from '../mutations/addNewTask';\nconst HeaderRow = styled(Flex.Row)`\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n`;\n\nconst Home = ({\n  data\n}) => {\n  const [open, setOpen] = React.useState(false);\n  const router = useRouter();\n  const [addNewTask] = useMutation(ADD_NEW_TASK);\n\n  function refreshData() {\n    router.replace(router.asPath);\n  }\n\n  function getCurrentDate() {\n    const date = moment();\n    return `${date.format('dddd')} ${date.format('MMMM')} ${date.date()}, ${date.year()}`;\n  }\n\n  async function submitNewTask(values) {\n    setOpen(false);\n    await addNewTask({\n      variables: {\n        name: values.name,\n        description: values.description\n      }\n    });\n    refreshData();\n  }\n\n  function toggleModal() {\n    setOpen(!open);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ModalProvider, {\n    children: [/*#__PURE__*/_jsxDEV(Flex.Col, {\n      children: [/*#__PURE__*/_jsxDEV(HeaderRow, {\n        children: [/*#__PURE__*/_jsxDEV(Text.Subtitle, {\n          children: getCurrentDate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setOpen(true),\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        data: filter(TaskListDataFragmentDoc, data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: open,\n      onBackgroundClick: toggleModal,\n      children: /*#__PURE__*/_jsxDEV(NewTaskForm, {\n        onSubmit: submitNewTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getServerSideProps = async () => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache()\n  });\n  const res = await client.query({\n    query: HomePageDocument\n  });\n  return {\n    props: res\n  };\n};\nexport default Home;","map":{"version":3,"sources":["/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/pages/index.tsx"],"names":["React","useRouter","ApolloClient","InMemoryCache","useMutation","filter","moment","styled","Modal","ModalProvider","TaskList","HomePageDocument","TaskListDataFragmentDoc","Flex","Text","Button","NewTaskForm","ADD_NEW_TASK","HeaderRow","Row","Home","data","open","setOpen","useState","router","addNewTask","refreshData","replace","asPath","getCurrentDate","date","format","year","submitNewTask","values","variables","name","description","toggleModal","getServerSideProps","client","uri","cache","res","query","props"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NextPage } from 'next';\nimport { useRouter } from 'next/router';\nimport { ApolloClient, InMemoryCache, useMutation } from '@apollo/client';\nimport { filter } from 'graphql-anywhere';\nimport moment from 'moment';\nimport styled from 'styled-components';\nimport Modal, { ModalProvider } from 'styled-react-modal';\nimport { TaskList } from '../components/TaskList/taskList';\nimport {\n  HomePageDocument,\n  HomePageQuery,\n  TaskListDataFragmentDoc,\n} from '../typedDocumentNodes';\nimport { Flex, Text, Button } from '../primitives';\nimport {\n  NewTaskForm,\n  NewTaskFormValues,\n} from '../components/NewTaskForm/newTaskForm';\nimport { ADD_NEW_TASK } from '../mutations/addNewTask';\n\ninterface HomePageProps {\n  data: HomePageQuery;\n}\n\nconst HeaderRow = styled(Flex.Row)`\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n`;\n\nconst Home: NextPage<HomePageProps> = ({ data }) => {\n  const [open, setOpen] = React.useState(false);\n  const router = useRouter();\n  const [addNewTask] = useMutation(ADD_NEW_TASK);\n\n  function refreshData() {\n    router.replace(router.asPath);\n  }\n\n  function getCurrentDate(): string {\n    const date = moment();\n    return `${date.format('dddd')} ${date.format(\n      'MMMM',\n    )} ${date.date()}, ${date.year()}`;\n  }\n\n  async function submitNewTask(values: NewTaskFormValues) {\n    setOpen(false);\n    await addNewTask({\n      variables: {\n        name: values.name,\n        description: values.description,\n      },\n    });\n    refreshData();\n  }\n\n  function toggleModal() {\n    setOpen(!open);\n  }\n\n  return (\n    <ModalProvider>\n      <Flex.Col>\n        <HeaderRow>\n          <Text.Subtitle>{getCurrentDate()}</Text.Subtitle>\n          <Button onClick={() => setOpen(true)}>Add Task</Button>\n        </HeaderRow>\n        <TaskList data={filter(TaskListDataFragmentDoc, data)} />\n      </Flex.Col>\n      <Modal isOpen={open} onBackgroundClick={toggleModal}>\n        <NewTaskForm onSubmit={submitNewTask} />\n      </Modal>\n    </ModalProvider>\n  );\n};\n\nexport const getServerSideProps = async () => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache(),\n  });\n\n  const res = await client.query<HomePageQuery>({\n    query: HomePageDocument,\n  });\n\n  return { props: res };\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}