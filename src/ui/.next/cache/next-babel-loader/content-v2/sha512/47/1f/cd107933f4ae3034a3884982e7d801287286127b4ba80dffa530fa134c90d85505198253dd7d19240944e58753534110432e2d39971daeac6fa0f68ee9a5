{"ast":null,"code":"import _toConsumableArray from \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/** All built-in and custom scalars, mapped to their actual values */\n\n/** entity representing a task */\nexport var TaskCardFragmentDoc = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'FragmentDefinition',\n    name: {\n      kind: 'Name',\n      value: 'TaskCard'\n    },\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: 'Task'\n      }\n    },\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'name'\n        }\n      }, {\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'description'\n        }\n      }, {\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'status'\n        }\n      }]\n    }\n  }]\n};\nexport var TaskListDataFragmentDoc = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'FragmentDefinition',\n    name: {\n      kind: 'Name',\n      value: 'TaskListData'\n    },\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: 'Query'\n      }\n    },\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'viewTasks'\n        },\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [{\n            kind: 'FragmentSpread',\n            name: {\n              kind: 'Name',\n              value: 'TaskCard'\n            }\n          }]\n        }\n      }]\n    }\n  }].concat(_toConsumableArray(TaskCardFragmentDoc.definitions))\n};","map":{"version":3,"sources":["/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/typedDocumentNodes.ts"],"names":["TaskCardFragmentDoc","kind","definitions","name","value","typeCondition","selectionSet","selections","TaskListDataFragmentDoc"],"mappings":";;AASA;;AAeA;AAsBA,OAAO,IAAMA,mBAA4D,GAAG;AAC1EC,EAAAA,IAAI,EAAE,UADoE;AAE1EC,EAAAA,WAAW,EAAE,CACX;AACED,IAAAA,IAAI,EAAE,oBADR;AAEEE,IAAAA,IAAI,EAAE;AAAEF,MAAAA,IAAI,EAAE,MAAR;AAAgBG,MAAAA,KAAK,EAAE;AAAvB,KAFR;AAGEC,IAAAA,aAAa,EAAE;AACbJ,MAAAA,IAAI,EAAE,WADO;AAEbE,MAAAA,IAAI,EAAE;AAAEF,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,KAAK,EAAE;AAAvB;AAFO,KAHjB;AAOEE,IAAAA,YAAY,EAAE;AACZL,MAAAA,IAAI,EAAE,cADM;AAEZM,MAAAA,UAAU,EAAE,CACV;AAAEN,QAAAA,IAAI,EAAE,OAAR;AAAiBE,QAAAA,IAAI,EAAE;AAAEF,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,KAAK,EAAE;AAAvB;AAAvB,OADU,EAEV;AAAEH,QAAAA,IAAI,EAAE,OAAR;AAAiBE,QAAAA,IAAI,EAAE;AAAEF,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,KAAK,EAAE;AAAvB;AAAvB,OAFU,EAGV;AAAEH,QAAAA,IAAI,EAAE,OAAR;AAAiBE,QAAAA,IAAI,EAAE;AAAEF,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,KAAK,EAAE;AAAvB;AAAvB,OAHU;AAFA;AAPhB,GADW;AAF6D,CAArE;AAqBP,OAAO,IAAMI,uBAGZ,GAAG;AACFP,EAAAA,IAAI,EAAE,UADJ;AAEFC,EAAAA,WAAW,GACT;AACED,IAAAA,IAAI,EAAE,oBADR;AAEEE,IAAAA,IAAI,EAAE;AAAEF,MAAAA,IAAI,EAAE,MAAR;AAAgBG,MAAAA,KAAK,EAAE;AAAvB,KAFR;AAGEC,IAAAA,aAAa,EAAE;AACbJ,MAAAA,IAAI,EAAE,WADO;AAEbE,MAAAA,IAAI,EAAE;AAAEF,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,KAAK,EAAE;AAAvB;AAFO,KAHjB;AAOEE,IAAAA,YAAY,EAAE;AACZL,MAAAA,IAAI,EAAE,cADM;AAEZM,MAAAA,UAAU,EAAE,CACV;AACEN,QAAAA,IAAI,EAAE,OADR;AAEEE,QAAAA,IAAI,EAAE;AAAEF,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,KAAK,EAAE;AAAvB,SAFR;AAGEE,QAAAA,YAAY,EAAE;AACZL,UAAAA,IAAI,EAAE,cADM;AAEZM,UAAAA,UAAU,EAAE,CACV;AACEN,YAAAA,IAAI,EAAE,gBADR;AAEEE,YAAAA,IAAI,EAAE;AAAEF,cAAAA,IAAI,EAAE,MAAR;AAAgBG,cAAAA,KAAK,EAAE;AAAvB;AAFR,WADU;AAFA;AAHhB,OADU;AAFA;AAPhB,GADS,4BA2BNJ,mBAAmB,CAACE,WA3Bd;AAFT,CAHG","sourcesContent":["import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** query that returns all tasks */\n  viewTasks?: Maybe<Array<Maybe<Task>>>;\n};\n\n/** entity representing a task */\nexport type Task = {\n  __typename?: 'Task';\n  /** task id */\n  id: Scalars['String'];\n  /** the name of the task */\n  name: Scalars['String'];\n  /** a description of the task */\n  description: Scalars['String'];\n  /** the status of the task (TODO, IN_PROGRESS, COMPLETE) */\n  status: Scalars['String'];\n};\n\nexport type TaskCardFragment = { __typename?: 'Task' } & Pick<\n  Task,\n  'name' | 'description' | 'status'\n>;\n\nexport type TaskListDataFragment = { __typename?: 'Query' } & {\n  viewTasks?: Maybe<Array<Maybe<{ __typename?: 'Task' } & TaskCardFragment>>>;\n};\n\nexport const TaskCardFragmentDoc: DocumentNode<TaskCardFragment, unknown> = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'FragmentDefinition',\n      name: { kind: 'Name', value: 'TaskCard' },\n      typeCondition: {\n        kind: 'NamedType',\n        name: { kind: 'Name', value: 'Task' },\n      },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          { kind: 'Field', name: { kind: 'Name', value: 'name' } },\n          { kind: 'Field', name: { kind: 'Name', value: 'description' } },\n          { kind: 'Field', name: { kind: 'Name', value: 'status' } },\n        ],\n      },\n    },\n  ],\n};\nexport const TaskListDataFragmentDoc: DocumentNode<\n  TaskListDataFragment,\n  unknown\n> = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'FragmentDefinition',\n      name: { kind: 'Name', value: 'TaskListData' },\n      typeCondition: {\n        kind: 'NamedType',\n        name: { kind: 'Name', value: 'Query' },\n      },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'viewTasks' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'FragmentSpread',\n                  name: { kind: 'Name', value: 'TaskCard' },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...TaskCardFragmentDoc.definitions,\n  ],\n};\n"]},"metadata":{},"sourceType":"module"}