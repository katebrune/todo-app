{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/client/pages/tasks.tsx\";\nimport React from 'react';\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\nconst TasksPage = ({\n  tasks\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        children: task.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: task.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n};\n\nexport const getServerSideProps = async () => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache()\n  });\n  const res = await client.query({\n    query: gql`\n      query GetTasks {\n        viewTasks {\n          name\n          description\n        }\n      }\n    `\n  });\n  console.log(res.data.viewTasks);\n  return {\n    props: {\n      tasks: res.data.viewTasks\n    }\n  };\n};\nexport default TasksPage;","map":{"version":3,"sources":["/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/client/pages/tasks.tsx"],"names":["React","ApolloClient","InMemoryCache","gql","TasksPage","tasks","map","task","name","description","getServerSideProps","client","uri","cache","res","query","console","log","data","viewTasks","props"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,QAAiD,gBAAjD;;AAOA,MAAMC,SAAmC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACzD,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGA,KAAK,CAACC,GAAN,CAAWC,IAAD,iBACT;AAAA,8BACE;AAAA,kBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAID,IAAI,CAACE;AAAT;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,CAFH;AAAA,kBADF;AAWD,CAZD;;AAcA,OAAO,MAAMC,kBAAkB,GAAG,YAAY;AAC5C,QAAMC,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC9BW,IAAAA,GAAG,EAAE,+BADyB;AAE9BC,IAAAA,KAAK,EAAE,IAAIX,aAAJ;AAFuB,GAAjB,CAAf;AAKA,QAAMY,GAAG,GAAG,MAAMH,MAAM,CAACI,KAAP,CAAoC;AACpDA,IAAAA,KAAK,EAAEZ,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AARwD,GAApC,CAAlB;AAWAa,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAJ,CAASC,SAArB;AACA,SAAO;AAAEC,IAAAA,KAAK,EAAE;AAAEf,MAAAA,KAAK,EAAES,GAAG,CAACI,IAAJ,CAASC;AAAlB;AAAT,GAAP;AACD,CAnBM;AAqBP,eAAef,SAAf","sourcesContent":["import React from 'react';\nimport { NextPage } from 'next';\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport { Task } from '../../shared/types/graphql';\n\ninterface TasksPageProps {\n  tasks: Task[];\n}\n\nconst TasksPage: NextPage<TasksPageProps> = ({ tasks }) => {\n  return (\n    <>\n      <h1>Tasks</h1>\n      {tasks.map((task) => (\n        <div>\n          <h6>{task.name}</h6>\n          <p>{task.description}</p>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport const getServerSideProps = async () => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache(),\n  });\n\n  const res = await client.query<{ viewTasks: Task[] }>({\n    query: gql`\n      query GetTasks {\n        viewTasks {\n          name\n          description\n        }\n      }\n    `,\n  });\n\n  console.log(res.data.viewTasks);\n  return { props: { tasks: res.data.viewTasks } };\n};\n\nexport default TasksPage;\n"]},"metadata":{},"sourceType":"module"}