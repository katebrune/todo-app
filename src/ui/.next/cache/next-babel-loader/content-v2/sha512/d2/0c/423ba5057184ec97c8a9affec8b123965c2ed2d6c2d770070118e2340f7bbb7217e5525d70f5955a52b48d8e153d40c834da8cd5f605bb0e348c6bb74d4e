{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/components/TaskList/taskList.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql } from '@apollo/client';\nimport React from 'react';\nimport { TaskCard } from '../TaskCard/taskCard';\nexport const TaskListFragment = gql`\n  fragment TaskListFragment on Query {\n    viewTasks {\n      name\n      description\n      status\n    }\n  }\n`;\nexport const TaskList = ({\n  tasks\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(TaskCard, _objectSpread({}, task), index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};","map":{"version":3,"sources":["/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/components/TaskList/taskList.tsx"],"names":["gql","React","TaskCard","TaskListFragment","TaskList","tasks","map","task","index"],"mappings":";;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAOC,KAAP,MAAyC,OAAzC;AAEA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,OAAO,MAAMC,gBAAgB,GAAGH,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO;AAcP,OAAO,MAAMI,QAA0C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACvE,sBACE;AAAA,cACGA,KAAK,CAACC,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBACT,QAAC,QAAD,oBAA0BD,IAA1B,GAAeC,KAAf;AAAA;AAAA;AAAA;AAAA,YADD;AADH,mBADF;AAOD,CARM","sourcesContent":["import { gql } from '@apollo/client';\nimport React, { FunctionComponent } from 'react';\nimport { Task } from '../../../shared/types/graphql';\nimport { TaskCard } from '../TaskCard/taskCard';\n\nexport const TaskListFragment = gql`\n  fragment TaskListFragment on Query {\n    viewTasks {\n      name\n      description\n      status\n    }\n  }\n`;\n\ninterface TaskListProps {\n  tasks: Task[];\n}\n\nexport const TaskList: FunctionComponent<TaskListProps> = ({ tasks }) => {\n  return (\n    <>\n      {tasks.map((task, index) => (\n        <TaskCard key={index} {...task} />\n      ))}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}