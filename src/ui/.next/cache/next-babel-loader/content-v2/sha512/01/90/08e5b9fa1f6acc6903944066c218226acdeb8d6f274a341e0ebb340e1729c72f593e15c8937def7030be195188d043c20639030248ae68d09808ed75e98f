{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/pages/index.tsx\";\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport { ApolloClient, gql, InMemoryCache } from '@apollo/client';\nimport { filter } from 'graphql-anywhere';\nimport moment from 'moment';\nimport styled from 'styled-components';\nimport Modal, { ModalProvider } from 'styled-react-modal';\nimport { TaskList } from '../components/TaskList/taskList';\nimport { HomePageDocument, TaskListDataFragmentDoc } from '../typedDocumentNodes';\nimport { Flex, Text } from '../primitives';\nimport { NewTaskForm } from '../components/NewTaskForm/newTaskForm';\nconst AddButton = styled.button`\n  border-radius: 25px;\n  padding: 10px;\n  background-color: #142250;\n  color: #25dfff;\n  border: 3px solid #25dfff;\n  height: 50px;\n  cursor: pointer;\n  width: 100px;\n  outline: none;\n  font-size: 1em;\n  font-weight: normal;\n\n  &:hover {\n    transition: 0.1s;\n    border: 4px solid #25dfff;\n    font-weight: bold;\n  }\n\n  &:active {\n    transform: translateY(4px);\n  }\n`;\nconst HeaderRow = styled(Flex.Row)`\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n`;\n\nconst Home = ({\n  data\n}) => {\n  const [open, setOpen] = React.useState(false);\n  const router = useRouter();\n\n  function refreshData() {\n    router.replace(router.asPath);\n  }\n\n  function getCurrentDate() {\n    const date = moment();\n    return `${date.format('dddd')} ${date.format('MMMM')} ${date.date()}, ${date.year()}`;\n  }\n\n  async function submitNewTask(values) {\n    setOpen(false);\n    await addNewTask(values);\n  }\n\n  async function addNewTask(values) {\n    const client = new ApolloClient({\n      uri: 'http://localhost:3000/graphql',\n      cache: new InMemoryCache()\n    });\n    await client.mutate({\n      mutation: gql`\n        mutation AddTask($name: String!, $description: String!) {\n          addTask(name: $name, description: $description) {\n            name\n            description\n            status\n          }\n        }\n      `,\n      variables: {\n        name: values.name,\n        description: values.description\n      }\n    });\n    refreshData();\n  }\n\n  function toggleModal() {\n    setOpen(!open);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ModalProvider, {\n    children: [/*#__PURE__*/_jsxDEV(Flex.Col, {\n      children: [/*#__PURE__*/_jsxDEV(HeaderRow, {\n        children: [/*#__PURE__*/_jsxDEV(Text.Subtitle, {\n          children: getCurrentDate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AddButton, {\n          onClick: () => setOpen(true),\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        data: filter(TaskListDataFragmentDoc, data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: open,\n      onBackgroundClick: toggleModal,\n      children: /*#__PURE__*/_jsxDEV(NewTaskForm, {\n        onSubmit: submitNewTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getServerSideProps = async () => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache()\n  });\n  const res = await client.query({\n    query: HomePageDocument\n  });\n  return {\n    props: res\n  };\n};\nexport default Home;","map":{"version":3,"sources":["/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/pages/index.tsx"],"names":["React","useRouter","ApolloClient","gql","InMemoryCache","filter","moment","styled","Modal","ModalProvider","TaskList","HomePageDocument","TaskListDataFragmentDoc","Flex","Text","NewTaskForm","AddButton","button","HeaderRow","Row","Home","data","open","setOpen","useState","router","refreshData","replace","asPath","getCurrentDate","date","format","year","submitNewTask","values","addNewTask","client","uri","cache","mutate","mutation","variables","name","description","toggleModal","getServerSideProps","res","query","props"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NextPage } from 'next';\nimport { useRouter } from 'next/router';\nimport { ApolloClient, gql, InMemoryCache } from '@apollo/client';\nimport { filter } from 'graphql-anywhere';\nimport moment from 'moment';\nimport styled from 'styled-components';\nimport Modal, { ModalProvider } from 'styled-react-modal';\nimport { TaskList } from '../components/TaskList/taskList';\nimport {\n  HomePageDocument,\n  HomePageQuery,\n  TaskListDataFragmentDoc,\n} from '../typedDocumentNodes';\nimport { Flex, Text } from '../primitives';\nimport {\n  NewTaskForm,\n  NewTaskFormValues,\n} from '../components/NewTaskForm/newTaskForm';\n\ninterface HomePageProps {\n  data: HomePageQuery;\n}\n\nconst AddButton = styled.button`\n  border-radius: 25px;\n  padding: 10px;\n  background-color: #142250;\n  color: #25dfff;\n  border: 3px solid #25dfff;\n  height: 50px;\n  cursor: pointer;\n  width: 100px;\n  outline: none;\n  font-size: 1em;\n  font-weight: normal;\n\n  &:hover {\n    transition: 0.1s;\n    border: 4px solid #25dfff;\n    font-weight: bold;\n  }\n\n  &:active {\n    transform: translateY(4px);\n  }\n`;\n\nconst HeaderRow = styled(Flex.Row)`\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n`;\n\nconst Home: NextPage<HomePageProps> = ({ data }) => {\n  const [open, setOpen] = React.useState(false);\n  const router = useRouter();\n\n  function refreshData() {\n    router.replace(router.asPath);\n  }\n\n  function getCurrentDate(): string {\n    const date = moment();\n    return `${date.format('dddd')} ${date.format(\n      'MMMM',\n    )} ${date.date()}, ${date.year()}`;\n  }\n\n  async function submitNewTask(values: NewTaskFormValues) {\n    setOpen(false);\n    await addNewTask(values);\n  }\n\n  async function addNewTask(values: NewTaskFormValues) {\n    const client = new ApolloClient({\n      uri: 'http://localhost:3000/graphql',\n      cache: new InMemoryCache(),\n    });\n\n    await client.mutate({\n      mutation: gql`\n        mutation AddTask($name: String!, $description: String!) {\n          addTask(name: $name, description: $description) {\n            name\n            description\n            status\n          }\n        }\n      `,\n      variables: { name: values.name, description: values.description },\n    });\n\n    refreshData();\n  }\n\n  function toggleModal() {\n    setOpen(!open);\n  }\n\n  return (\n    <ModalProvider>\n      <Flex.Col>\n        <HeaderRow>\n          <Text.Subtitle>{getCurrentDate()}</Text.Subtitle>\n          <AddButton onClick={() => setOpen(true)}>Add Task</AddButton>\n        </HeaderRow>\n        <TaskList data={filter(TaskListDataFragmentDoc, data)} />\n      </Flex.Col>\n      <Modal isOpen={open} onBackgroundClick={toggleModal}>\n        <NewTaskForm onSubmit={submitNewTask} />\n      </Modal>\n    </ModalProvider>\n  );\n};\n\nexport const getServerSideProps = async () => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache(),\n  });\n\n  const res = await client.query<HomePageQuery>({\n    query: HomePageDocument,\n  });\n\n  return { props: res };\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}