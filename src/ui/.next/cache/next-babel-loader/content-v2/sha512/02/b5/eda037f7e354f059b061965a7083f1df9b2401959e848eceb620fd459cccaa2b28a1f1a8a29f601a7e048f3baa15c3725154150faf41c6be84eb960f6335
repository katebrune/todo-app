{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/components/TaskList/taskList.tsx\",\n    _this = this;\n\nimport React from 'react';\nimport { filter, check } from 'graphql-anywhere';\nimport { CompleteListDataFragmentDoc, InProgressListDataFragmentDoc, TaskCardDataFragmentDoc, TodoListDataFragmentDoc } from '../../typedDocumentNodes';\nimport { TaskCard } from '../TaskCard/taskCard';\nexport var TaskList = function TaskList(_ref) {\n  var data = _ref.data;\n\n  function isDocType(doc, data) {\n    var res;\n\n    try {\n      check(doc, data);\n    } catch (err) {\n      res = false;\n    } finally {\n      return res;\n    }\n  }\n\n  function isTodoList(data) {\n    return isDocType(TodoListDataFragmentDoc, data);\n  }\n\n  function isInProgressLIst(data) {\n    return isDocType(InProgressListDataFragmentDoc, data);\n  }\n\n  function isCompleteList(data) {\n    return isDocType(CompleteListDataFragmentDoc, data);\n  }\n\n  function getKey(data) {\n    if (isTodoList(data)) return 'todoTasks';\n    if (isInProgressLIst(data)) return 'inProgressTasks';\n    if (isCompleteList(data)) return 'completeTasks';\n    return 'viewTasks';\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: data.completeTasks.map(function (task, index) {\n      return /*#__PURE__*/_jsxDEV(TaskCard, {\n        data: filter(TaskCardDataFragmentDoc, task)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, _this);\n    })\n  }, void 0, false);\n};\n_c = TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/components/TaskList/taskList.tsx"],"names":["React","filter","check","CompleteListDataFragmentDoc","InProgressListDataFragmentDoc","TaskCardDataFragmentDoc","TodoListDataFragmentDoc","TaskCard","TaskList","data","isDocType","doc","res","err","isTodoList","isInProgressLIst","isCompleteList","getKey","completeTasks","map","task","index"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAyC,OAAzC;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,SAEEC,2BAFF,EAIEC,6BAJF,EAKEC,uBALF,EAQEC,uBARF,QASO,0BATP;AAUA,SAASC,QAAT,QAAyB,sBAAzB;AAIA,OAAO,IAAMC,QAA0C,GAAG,SAA7CA,QAA6C,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AACtE,WAASC,SAAT,CAAmBC,GAAnB,EAAsCF,IAAtC,EAAiD;AAC/C,QAAIG,GAAJ;;AAEA,QAAI;AACFV,MAAAA,KAAK,CAACS,GAAD,EAAMF,IAAN,CAAL;AACD,KAFD,CAEE,OAAOI,GAAP,EAAY;AACZD,MAAAA,GAAG,GAAG,KAAN;AACD,KAJD,SAIU;AACR,aAAOA,GAAP;AACD;AACF;;AAED,WAASE,UAAT,CAAoBL,IAApB,EAAwD;AACtD,WAAOC,SAAS,CAACJ,uBAAD,EAA0BG,IAA1B,CAAhB;AACD;;AAED,WAASM,gBAAT,CAA0BN,IAA1B,EAAoE;AAClE,WAAOC,SAAS,CAACN,6BAAD,EAAgCK,IAAhC,CAAhB;AACD;;AAED,WAASO,cAAT,CAAwBP,IAAxB,EAAgE;AAC9D,WAAOC,SAAS,CAACP,2BAAD,EAA8BM,IAA9B,CAAhB;AACD;;AAED,WAASQ,MAAT,CAAgBR,IAAhB,EAA8B;AAC5B,QAAIK,UAAU,CAACL,IAAD,CAAd,EAAsB,OAAO,WAAP;AACtB,QAAIM,gBAAgB,CAACN,IAAD,CAApB,EAA4B,OAAO,iBAAP;AAC5B,QAAIO,cAAc,CAACP,IAAD,CAAlB,EAA0B,OAAO,eAAP;AAC1B,WAAO,WAAP;AACD;;AAED,sBACE;AAAA,cACGA,IAAI,CAACS,aAAL,CAAmBC,GAAnB,CAAuB,UAACC,IAAD,EAAOC,KAAP;AAAA,0BACtB,QAAC,QAAD;AAAsB,QAAA,IAAI,EAAEpB,MAAM,CAACI,uBAAD,EAA0Be,IAA1B;AAAlC,SAAeC,KAAf;AAAA;AAAA;AAAA;AAAA,eADsB;AAAA,KAAvB;AADH,mBADF;AAOD,CAvCM;KAAMb,Q","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { filter, check } from 'graphql-anywhere';\nimport {\n  CompleteListDataFragment,\n  CompleteListDataFragmentDoc,\n  InProgressListDataFragment,\n  InProgressListDataFragmentDoc,\n  TaskCardDataFragmentDoc,\n  TaskListDataFragmentDoc,\n  TodoListDataFragment,\n  TodoListDataFragmentDoc,\n} from '../../typedDocumentNodes';\nimport { TaskCard } from '../TaskCard/taskCard';\nimport { TaskListProps, ListType } from './interfaces';\nimport { DocumentNode } from 'graphql';\n\nexport const TaskList: FunctionComponent<TaskListProps> = ({ data }) => {\n  function isDocType(doc: DocumentNode, data: any) {\n    let res;\n\n    try {\n      check(doc, data);\n    } catch (err) {\n      res = false;\n    } finally {\n      return res;\n    }\n  }\n\n  function isTodoList(data): data is TodoListDataFragment {\n    return isDocType(TodoListDataFragmentDoc, data);\n  }\n\n  function isInProgressLIst(data): data is InProgressListDataFragment {\n    return isDocType(InProgressListDataFragmentDoc, data);\n  }\n\n  function isCompleteList(data): data is CompleteListDataFragment {\n    return isDocType(CompleteListDataFragmentDoc, data);\n  }\n\n  function getKey(data): string {\n    if (isTodoList(data)) return 'todoTasks';\n    if (isInProgressLIst(data)) return 'inProgressTasks';\n    if (isCompleteList(data)) return 'completeTasks';\n    return 'viewTasks';\n  }\n\n  return (\n    <>\n      {data.completeTasks.map((task, index) => (\n        <TaskCard key={index} data={filter(TaskCardDataFragmentDoc, task)} />\n      ))}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}