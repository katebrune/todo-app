{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/pages/index.tsx\";\nimport React from 'react';\nimport { ApolloClient, gql, InMemoryCache } from '@apollo/client';\nimport { filter } from 'graphql-anywhere';\nimport { TaskList } from '../components/TaskList/taskList';\nimport { TaskListDataFragmentDoc } from '../typedDocumentNodes';\n\nconst Home = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello, World!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tasks:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      data: filter(TaskList.fragments.tasks, data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport const getServerSideProps = async () => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache()\n  });\n  const HOME_PAGE_QUERY = gql`\n    query HomePageQuery {\n      ...TaskListData\n    }\n    ${TaskListDataFragmentDoc}\n  `;\n  const res = await client.query({\n    query: HOME_PAGE_QUERY\n  });\n  const {\n    data\n  } = res;\n  return {\n    props: {\n      data: data\n    }\n  };\n};\nexport default Home;","map":{"version":3,"sources":["/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/pages/index.tsx"],"names":["React","ApolloClient","gql","InMemoryCache","filter","TaskList","TaskListDataFragmentDoc","Home","data","fragments","tasks","getServerSideProps","client","uri","cache","HOME_PAGE_QUERY","res","query","props"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,aAA5B,QAAiD,gBAAjD;AACA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,uBAAT,QAAwC,uBAAxC;;AAMA,MAAMC,IAA6B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAClD,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEJ,MAAM,CAACC,QAAQ,CAACI,SAAT,CAAmBC,KAApB,EAA2BF,IAA3B;AAAtB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAOD,CARD;;AAUA,OAAO,MAAMG,kBAAkB,GAAG,YAAY;AAC5C,QAAMC,MAAM,GAAG,IAAIX,YAAJ,CAAiB;AAC9BY,IAAAA,GAAG,EAAE,+BADyB;AAE9BC,IAAAA,KAAK,EAAE,IAAIX,aAAJ;AAFuB,GAAjB,CAAf;AAKA,QAAMY,eAAe,GAAGb,GAAI;AAC9B;AACA;AACA;AACA,MAAMI,uBAAwB;AAC9B,GALE;AAOA,QAAMU,GAAG,GAAG,MAAMJ,MAAM,CAACK,KAAP,CAAoC;AACpDA,IAAAA,KAAK,EAAEF;AAD6C,GAApC,CAAlB;AAIA,QAAM;AAAEP,IAAAA;AAAF,MAAWQ,GAAjB;AACA,SAAO;AAAEE,IAAAA,KAAK,EAAE;AAAEV,MAAAA,IAAI,EAAEA;AAAR;AAAT,GAAP;AACD,CAnBM;AAqBP,eAAeD,IAAf","sourcesContent":["import React from 'react';\nimport { NextPage } from 'next';\nimport { ApolloClient, gql, InMemoryCache } from '@apollo/client';\nimport { filter } from 'graphql-anywhere';\nimport { Task } from '../../shared/types/graphql';\nimport { TaskList } from '../components/TaskList/taskList';\nimport { TaskListDataFragmentDoc } from '../typedDocumentNodes';\n\ninterface HomePageProps {\n  data: any;\n}\n\nconst Home: NextPage<HomePageProps> = ({ data }) => {\n  return (\n    <>\n      <h1>Hello, World!</h1>\n      <h2>Tasks:</h2>\n      <TaskList data={filter(TaskList.fragments.tasks, data)} />\n    </>\n  );\n};\n\nexport const getServerSideProps = async () => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache(),\n  });\n\n  const HOME_PAGE_QUERY = gql`\n    query HomePageQuery {\n      ...TaskListData\n    }\n    ${TaskListDataFragmentDoc}\n  `;\n\n  const res = await client.query<{ viewTasks: Task[] }>({\n    query: HOME_PAGE_QUERY,\n  });\n\n  const { data } = res;\n  return { props: { data: data } };\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}