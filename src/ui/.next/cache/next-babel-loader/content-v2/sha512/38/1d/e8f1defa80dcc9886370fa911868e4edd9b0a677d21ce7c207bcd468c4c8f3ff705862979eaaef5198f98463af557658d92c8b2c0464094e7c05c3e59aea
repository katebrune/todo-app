{"ast":null,"code":"import _toConsumableArray from \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/** All built-in and custom scalars, mapped to their actual values */\n\n/** entity representing a task */\nexport var TaskCardDataFragmentDoc = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'FragmentDefinition',\n    name: {\n      kind: 'Name',\n      value: 'TaskCardData'\n    },\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: 'Task'\n      }\n    },\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'name'\n        }\n      }, {\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'description'\n        }\n      }, {\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'status'\n        }\n      }]\n    }\n  }]\n};\nexport var CompleteListDataFragmentDoc = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'FragmentDefinition',\n    name: {\n      kind: 'Name',\n      value: 'CompleteListData'\n    },\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: 'Query'\n      }\n    },\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'viewTasks'\n        },\n        arguments: [{\n          kind: 'Argument',\n          name: {\n            kind: 'Name',\n            value: 'status'\n          },\n          value: {\n            kind: 'StringValue',\n            value: 'COMPLETE',\n            block: false\n          }\n        }],\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [{\n            kind: 'FragmentSpread',\n            name: {\n              kind: 'Name',\n              value: 'TaskCardData'\n            }\n          }]\n        }\n      }]\n    }\n  }].concat(_toConsumableArray(TaskCardDataFragmentDoc.definitions))\n};\nexport var InProgressListDataFragmentDoc = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'FragmentDefinition',\n    name: {\n      kind: 'Name',\n      value: 'InProgressListData'\n    },\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: 'Query'\n      }\n    },\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'viewTasks'\n        },\n        arguments: [{\n          kind: 'Argument',\n          name: {\n            kind: 'Name',\n            value: 'status'\n          },\n          value: {\n            kind: 'StringValue',\n            value: 'IN_PROGRESS',\n            block: false\n          }\n        }],\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [{\n            kind: 'FragmentSpread',\n            name: {\n              kind: 'Name',\n              value: 'TaskCardData'\n            }\n          }]\n        }\n      }]\n    }\n  }].concat(_toConsumableArray(TaskCardDataFragmentDoc.definitions))\n};\nexport var TaskListDataFragmentDoc = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'FragmentDefinition',\n    name: {\n      kind: 'Name',\n      value: 'TaskListData'\n    },\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: 'Query'\n      }\n    },\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'viewTasks'\n        },\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [{\n            kind: 'FragmentSpread',\n            name: {\n              kind: 'Name',\n              value: 'TaskCardData'\n            }\n          }]\n        }\n      }]\n    }\n  }].concat(_toConsumableArray(TaskCardDataFragmentDoc.definitions))\n};\nexport var TodoListDataFragmentDoc = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'FragmentDefinition',\n    name: {\n      kind: 'Name',\n      value: 'TodoListData'\n    },\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: 'Query'\n      }\n    },\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: 'viewTasks'\n        },\n        arguments: [{\n          kind: 'Argument',\n          name: {\n            kind: 'Name',\n            value: 'status'\n          },\n          value: {\n            kind: 'StringValue',\n            value: 'TODO',\n            block: false\n          }\n        }],\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [{\n            kind: 'FragmentSpread',\n            name: {\n              kind: 'Name',\n              value: 'TaskCardData'\n            }\n          }]\n        }\n      }]\n    }\n  }].concat(_toConsumableArray(TaskCardDataFragmentDoc.definitions))\n};\nexport var HomePageDocument = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: {\n      kind: 'Name',\n      value: 'HomePage'\n    },\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'FragmentSpread',\n        name: {\n          kind: 'Name',\n          value: 'TaskListData'\n        }\n      }]\n    }\n  }].concat(_toConsumableArray(TaskListDataFragmentDoc.definitions))\n};","map":{"version":3,"sources":["/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/typedDocumentNodes.ts"],"names":["TaskCardDataFragmentDoc","kind","definitions","name","value","typeCondition","selectionSet","selections","CompleteListDataFragmentDoc","arguments","block","InProgressListDataFragmentDoc","TaskListDataFragmentDoc","TodoListDataFragmentDoc","HomePageDocument","operation"],"mappings":";;AASA;;AAmBA;AA8CA,OAAO,IAAMA,uBAGZ,GAAG;AACFC,EAAAA,IAAI,EAAE,UADJ;AAEFC,EAAAA,WAAW,EAAE,CACX;AACED,IAAAA,IAAI,EAAE,oBADR;AAEEE,IAAAA,IAAI,EAAE;AAAEF,MAAAA,IAAI,EAAE,MAAR;AAAgBG,MAAAA,KAAK,EAAE;AAAvB,KAFR;AAGEC,IAAAA,aAAa,EAAE;AACbJ,MAAAA,IAAI,EAAE,WADO;AAEbE,MAAAA,IAAI,EAAE;AAAEF,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,KAAK,EAAE;AAAvB;AAFO,KAHjB;AAOEE,IAAAA,YAAY,EAAE;AACZL,MAAAA,IAAI,EAAE,cADM;AAEZM,MAAAA,UAAU,EAAE,CACV;AAAEN,QAAAA,IAAI,EAAE,OAAR;AAAiBE,QAAAA,IAAI,EAAE;AAAEF,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,KAAK,EAAE;AAAvB;AAAvB,OADU,EAEV;AAAEH,QAAAA,IAAI,EAAE,OAAR;AAAiBE,QAAAA,IAAI,EAAE;AAAEF,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,KAAK,EAAE;AAAvB;AAAvB,OAFU,EAGV;AAAEH,QAAAA,IAAI,EAAE,OAAR;AAAiBE,QAAAA,IAAI,EAAE;AAAEF,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,KAAK,EAAE;AAAvB;AAAvB,OAHU;AAFA;AAPhB,GADW;AAFX,CAHG;AAwBP,OAAO,IAAMI,2BAGZ,GAAG;AACFP,EAAAA,IAAI,EAAE,UADJ;AAEFC,EAAAA,WAAW,GACT;AACED,IAAAA,IAAI,EAAE,oBADR;AAEEE,IAAAA,IAAI,EAAE;AAAEF,MAAAA,IAAI,EAAE,MAAR;AAAgBG,MAAAA,KAAK,EAAE;AAAvB,KAFR;AAGEC,IAAAA,aAAa,EAAE;AACbJ,MAAAA,IAAI,EAAE,WADO;AAEbE,MAAAA,IAAI,EAAE;AAAEF,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,KAAK,EAAE;AAAvB;AAFO,KAHjB;AAOEE,IAAAA,YAAY,EAAE;AACZL,MAAAA,IAAI,EAAE,cADM;AAEZM,MAAAA,UAAU,EAAE,CACV;AACEN,QAAAA,IAAI,EAAE,OADR;AAEEE,QAAAA,IAAI,EAAE;AAAEF,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,KAAK,EAAE;AAAvB,SAFR;AAGEK,QAAAA,SAAS,EAAE,CACT;AACER,UAAAA,IAAI,EAAE,UADR;AAEEE,UAAAA,IAAI,EAAE;AAAEF,YAAAA,IAAI,EAAE,MAAR;AAAgBG,YAAAA,KAAK,EAAE;AAAvB,WAFR;AAGEA,UAAAA,KAAK,EAAE;AAAEH,YAAAA,IAAI,EAAE,aAAR;AAAuBG,YAAAA,KAAK,EAAE,UAA9B;AAA0CM,YAAAA,KAAK,EAAE;AAAjD;AAHT,SADS,CAHb;AAUEJ,QAAAA,YAAY,EAAE;AACZL,UAAAA,IAAI,EAAE,cADM;AAEZM,UAAAA,UAAU,EAAE,CACV;AACEN,YAAAA,IAAI,EAAE,gBADR;AAEEE,YAAAA,IAAI,EAAE;AAAEF,cAAAA,IAAI,EAAE,MAAR;AAAgBG,cAAAA,KAAK,EAAE;AAAvB;AAFR,WADU;AAFA;AAVhB,OADU;AAFA;AAPhB,GADS,4BAkCNJ,uBAAuB,CAACE,WAlClB;AAFT,CAHG;AA0CP,OAAO,IAAMS,6BAGZ,GAAG;AACFV,EAAAA,IAAI,EAAE,UADJ;AAEFC,EAAAA,WAAW,GACT;AACED,IAAAA,IAAI,EAAE,oBADR;AAEEE,IAAAA,IAAI,EAAE;AAAEF,MAAAA,IAAI,EAAE,MAAR;AAAgBG,MAAAA,KAAK,EAAE;AAAvB,KAFR;AAGEC,IAAAA,aAAa,EAAE;AACbJ,MAAAA,IAAI,EAAE,WADO;AAEbE,MAAAA,IAAI,EAAE;AAAEF,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,KAAK,EAAE;AAAvB;AAFO,KAHjB;AAOEE,IAAAA,YAAY,EAAE;AACZL,MAAAA,IAAI,EAAE,cADM;AAEZM,MAAAA,UAAU,EAAE,CACV;AACEN,QAAAA,IAAI,EAAE,OADR;AAEEE,QAAAA,IAAI,EAAE;AAAEF,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,KAAK,EAAE;AAAvB,SAFR;AAGEK,QAAAA,SAAS,EAAE,CACT;AACER,UAAAA,IAAI,EAAE,UADR;AAEEE,UAAAA,IAAI,EAAE;AAAEF,YAAAA,IAAI,EAAE,MAAR;AAAgBG,YAAAA,KAAK,EAAE;AAAvB,WAFR;AAGEA,UAAAA,KAAK,EAAE;AACLH,YAAAA,IAAI,EAAE,aADD;AAELG,YAAAA,KAAK,EAAE,aAFF;AAGLM,YAAAA,KAAK,EAAE;AAHF;AAHT,SADS,CAHb;AAcEJ,QAAAA,YAAY,EAAE;AACZL,UAAAA,IAAI,EAAE,cADM;AAEZM,UAAAA,UAAU,EAAE,CACV;AACEN,YAAAA,IAAI,EAAE,gBADR;AAEEE,YAAAA,IAAI,EAAE;AAAEF,cAAAA,IAAI,EAAE,MAAR;AAAgBG,cAAAA,KAAK,EAAE;AAAvB;AAFR,WADU;AAFA;AAdhB,OADU;AAFA;AAPhB,GADS,4BAsCNJ,uBAAuB,CAACE,WAtClB;AAFT,CAHG;AA8CP,OAAO,IAAMU,uBAGZ,GAAG;AACFX,EAAAA,IAAI,EAAE,UADJ;AAEFC,EAAAA,WAAW,GACT;AACED,IAAAA,IAAI,EAAE,oBADR;AAEEE,IAAAA,IAAI,EAAE;AAAEF,MAAAA,IAAI,EAAE,MAAR;AAAgBG,MAAAA,KAAK,EAAE;AAAvB,KAFR;AAGEC,IAAAA,aAAa,EAAE;AACbJ,MAAAA,IAAI,EAAE,WADO;AAEbE,MAAAA,IAAI,EAAE;AAAEF,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,KAAK,EAAE;AAAvB;AAFO,KAHjB;AAOEE,IAAAA,YAAY,EAAE;AACZL,MAAAA,IAAI,EAAE,cADM;AAEZM,MAAAA,UAAU,EAAE,CACV;AACEN,QAAAA,IAAI,EAAE,OADR;AAEEE,QAAAA,IAAI,EAAE;AAAEF,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,KAAK,EAAE;AAAvB,SAFR;AAGEE,QAAAA,YAAY,EAAE;AACZL,UAAAA,IAAI,EAAE,cADM;AAEZM,UAAAA,UAAU,EAAE,CACV;AACEN,YAAAA,IAAI,EAAE,gBADR;AAEEE,YAAAA,IAAI,EAAE;AAAEF,cAAAA,IAAI,EAAE,MAAR;AAAgBG,cAAAA,KAAK,EAAE;AAAvB;AAFR,WADU;AAFA;AAHhB,OADU;AAFA;AAPhB,GADS,4BA2BNJ,uBAAuB,CAACE,WA3BlB;AAFT,CAHG;AAmCP,OAAO,IAAMW,uBAGZ,GAAG;AACFZ,EAAAA,IAAI,EAAE,UADJ;AAEFC,EAAAA,WAAW,GACT;AACED,IAAAA,IAAI,EAAE,oBADR;AAEEE,IAAAA,IAAI,EAAE;AAAEF,MAAAA,IAAI,EAAE,MAAR;AAAgBG,MAAAA,KAAK,EAAE;AAAvB,KAFR;AAGEC,IAAAA,aAAa,EAAE;AACbJ,MAAAA,IAAI,EAAE,WADO;AAEbE,MAAAA,IAAI,EAAE;AAAEF,QAAAA,IAAI,EAAE,MAAR;AAAgBG,QAAAA,KAAK,EAAE;AAAvB;AAFO,KAHjB;AAOEE,IAAAA,YAAY,EAAE;AACZL,MAAAA,IAAI,EAAE,cADM;AAEZM,MAAAA,UAAU,EAAE,CACV;AACEN,QAAAA,IAAI,EAAE,OADR;AAEEE,QAAAA,IAAI,EAAE;AAAEF,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,KAAK,EAAE;AAAvB,SAFR;AAGEK,QAAAA,SAAS,EAAE,CACT;AACER,UAAAA,IAAI,EAAE,UADR;AAEEE,UAAAA,IAAI,EAAE;AAAEF,YAAAA,IAAI,EAAE,MAAR;AAAgBG,YAAAA,KAAK,EAAE;AAAvB,WAFR;AAGEA,UAAAA,KAAK,EAAE;AAAEH,YAAAA,IAAI,EAAE,aAAR;AAAuBG,YAAAA,KAAK,EAAE,MAA9B;AAAsCM,YAAAA,KAAK,EAAE;AAA7C;AAHT,SADS,CAHb;AAUEJ,QAAAA,YAAY,EAAE;AACZL,UAAAA,IAAI,EAAE,cADM;AAEZM,UAAAA,UAAU,EAAE,CACV;AACEN,YAAAA,IAAI,EAAE,gBADR;AAEEE,YAAAA,IAAI,EAAE;AAAEF,cAAAA,IAAI,EAAE,MAAR;AAAgBG,cAAAA,KAAK,EAAE;AAAvB;AAFR,WADU;AAFA;AAVhB,OADU;AAFA;AAPhB,GADS,4BAkCNJ,uBAAuB,CAACE,WAlClB;AAFT,CAHG;AA0CP,OAAO,IAAMY,gBAGZ,GAAG;AACFb,EAAAA,IAAI,EAAE,UADJ;AAEFC,EAAAA,WAAW,GACT;AACED,IAAAA,IAAI,EAAE,qBADR;AAEEc,IAAAA,SAAS,EAAE,OAFb;AAGEZ,IAAAA,IAAI,EAAE;AAAEF,MAAAA,IAAI,EAAE,MAAR;AAAgBG,MAAAA,KAAK,EAAE;AAAvB,KAHR;AAIEE,IAAAA,YAAY,EAAE;AACZL,MAAAA,IAAI,EAAE,cADM;AAEZM,MAAAA,UAAU,EAAE,CACV;AACEN,QAAAA,IAAI,EAAE,gBADR;AAEEE,QAAAA,IAAI,EAAE;AAAEF,UAAAA,IAAI,EAAE,MAAR;AAAgBG,UAAAA,KAAK,EAAE;AAAvB;AAFR,OADU;AAFA;AAJhB,GADS,4BAeNQ,uBAAuB,CAACV,WAflB;AAFT,CAHG","sourcesContent":["import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** query that returns all tasks */\n  viewTasks?: Maybe<Array<Maybe<Task>>>;\n};\n\nexport type QueryViewTasksArgs = {\n  status?: Maybe<Scalars['String']>;\n};\n\n/** entity representing a task */\nexport type Task = {\n  __typename?: 'Task';\n  /** task id */\n  id: Scalars['String'];\n  /** the name of the task */\n  name: Scalars['String'];\n  /** a description of the task */\n  description: Scalars['String'];\n  /** the status of the task (TODO, IN_PROGRESS, COMPLETE) */\n  status: Scalars['String'];\n};\n\nexport type TaskCardDataFragment = { __typename?: 'Task' } & Pick<\n  Task,\n  'name' | 'description' | 'status'\n>;\n\nexport type CompleteListDataFragment = { __typename?: 'Query' } & {\n  viewTasks?: Maybe<\n    Array<Maybe<{ __typename?: 'Task' } & TaskCardDataFragment>>\n  >;\n};\n\nexport type InProgressListDataFragment = { __typename?: 'Query' } & {\n  viewTasks?: Maybe<\n    Array<Maybe<{ __typename?: 'Task' } & TaskCardDataFragment>>\n  >;\n};\n\nexport type TaskListDataFragment = { __typename?: 'Query' } & {\n  viewTasks?: Maybe<\n    Array<Maybe<{ __typename?: 'Task' } & TaskCardDataFragment>>\n  >;\n};\n\nexport type TodoListDataFragment = { __typename?: 'Query' } & {\n  viewTasks?: Maybe<\n    Array<Maybe<{ __typename?: 'Task' } & TaskCardDataFragment>>\n  >;\n};\n\nexport type HomePageQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type HomePageQuery = { __typename?: 'Query' } & TaskListDataFragment;\n\nexport const TaskCardDataFragmentDoc: DocumentNode<\n  TaskCardDataFragment,\n  unknown\n> = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'FragmentDefinition',\n      name: { kind: 'Name', value: 'TaskCardData' },\n      typeCondition: {\n        kind: 'NamedType',\n        name: { kind: 'Name', value: 'Task' },\n      },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          { kind: 'Field', name: { kind: 'Name', value: 'name' } },\n          { kind: 'Field', name: { kind: 'Name', value: 'description' } },\n          { kind: 'Field', name: { kind: 'Name', value: 'status' } },\n        ],\n      },\n    },\n  ],\n};\nexport const CompleteListDataFragmentDoc: DocumentNode<\n  CompleteListDataFragment,\n  unknown\n> = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'FragmentDefinition',\n      name: { kind: 'Name', value: 'CompleteListData' },\n      typeCondition: {\n        kind: 'NamedType',\n        name: { kind: 'Name', value: 'Query' },\n      },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'viewTasks' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'status' },\n                value: { kind: 'StringValue', value: 'COMPLETE', block: false },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'FragmentSpread',\n                  name: { kind: 'Name', value: 'TaskCardData' },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...TaskCardDataFragmentDoc.definitions,\n  ],\n};\nexport const InProgressListDataFragmentDoc: DocumentNode<\n  InProgressListDataFragment,\n  unknown\n> = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'FragmentDefinition',\n      name: { kind: 'Name', value: 'InProgressListData' },\n      typeCondition: {\n        kind: 'NamedType',\n        name: { kind: 'Name', value: 'Query' },\n      },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'viewTasks' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'status' },\n                value: {\n                  kind: 'StringValue',\n                  value: 'IN_PROGRESS',\n                  block: false,\n                },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'FragmentSpread',\n                  name: { kind: 'Name', value: 'TaskCardData' },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...TaskCardDataFragmentDoc.definitions,\n  ],\n};\nexport const TaskListDataFragmentDoc: DocumentNode<\n  TaskListDataFragment,\n  unknown\n> = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'FragmentDefinition',\n      name: { kind: 'Name', value: 'TaskListData' },\n      typeCondition: {\n        kind: 'NamedType',\n        name: { kind: 'Name', value: 'Query' },\n      },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'viewTasks' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'FragmentSpread',\n                  name: { kind: 'Name', value: 'TaskCardData' },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...TaskCardDataFragmentDoc.definitions,\n  ],\n};\nexport const TodoListDataFragmentDoc: DocumentNode<\n  TodoListDataFragment,\n  unknown\n> = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'FragmentDefinition',\n      name: { kind: 'Name', value: 'TodoListData' },\n      typeCondition: {\n        kind: 'NamedType',\n        name: { kind: 'Name', value: 'Query' },\n      },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'viewTasks' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'status' },\n                value: { kind: 'StringValue', value: 'TODO', block: false },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'FragmentSpread',\n                  name: { kind: 'Name', value: 'TaskCardData' },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...TaskCardDataFragmentDoc.definitions,\n  ],\n};\nexport const HomePageDocument: DocumentNode<\n  HomePageQuery,\n  HomePageQueryVariables\n> = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: { kind: 'Name', value: 'HomePage' },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'FragmentSpread',\n            name: { kind: 'Name', value: 'TaskListData' },\n          },\n        ],\n      },\n    },\n    ...TaskListDataFragmentDoc.definitions,\n  ],\n};\n"]},"metadata":{},"sourceType":"module"}