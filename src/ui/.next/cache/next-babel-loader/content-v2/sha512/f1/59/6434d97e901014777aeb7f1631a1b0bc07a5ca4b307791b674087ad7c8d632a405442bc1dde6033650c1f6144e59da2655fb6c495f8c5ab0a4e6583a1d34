{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/components/TaskCard/taskCard.tsx\";\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport { ApolloClient, gql, InMemoryCache } from '@apollo/client';\nimport { Flex, Checkbox, Text } from '../../primitives';\nconst BaseCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  padding: 0 0 32px;\n  margin: 20px;\n  margin-left: 100px;\n  width: 300px;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.05), 0 0px 40px rgba(0, 0, 0, 0.08);\n  border-radius: 20px;\n  background-color: #0a1944;\n`;\nconst BaseContent = styled.div`\n  padding: 10px;\n  color: #97b4ff;\n`;\nconst BaseTitle = styled.div`\n  padding: 10px;\n  color: #ffffff;\n  font-weight: bold;\n  font-size: 1.5em;\n  border-bottom: 2px solid #8916ff;\n  margin: 5px;\n`;\nconst CompleteTitle = styled(BaseTitle)`\n  color: #97b4ff;\n  border-bottom: 2px solid #97b4ff;\n`;\nconst TitleRow = styled(Flex.Row)`\n  justify-content: space-between;\n  align-items: center;\n`;\nexport const TaskCard = ({\n  data\n}) => {\n  const {\n    id,\n    name,\n    description,\n    status\n  } = data;\n  const router = useRouter();\n\n  function refreshData() {\n    router.replace(router.asPath);\n  }\n\n  async function updateTaskStatus() {\n    const client = new ApolloClient({\n      uri: 'http://localhost:3000/graphql',\n      cache: new InMemoryCache()\n    });\n    const udpatedStatus = status === 'COMPLETE' ? 'TODO' : 'COMPLETE';\n    await client.mutate({\n      mutation: gql`\n        mutation updateTaskStatus($id: Int!, $status: String!) {\n          updateTask(id: $id, status: $status) {\n            name\n            description\n            status\n          }\n        }\n      `,\n      variables: {\n        id: id,\n        status: udpatedStatus\n      }\n    });\n    refreshData();\n  }\n\n  return /*#__PURE__*/_jsxDEV(BaseCard, {\n    children: [name && (status === 'COMPLETE' ? /*#__PURE__*/_jsxDEV(CompleteTitle, {\n      children: /*#__PURE__*/_jsxDEV(TitleRow, {\n        children: [/*#__PURE__*/_jsxDEV(Text.Subtitle, {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n          type: \"checkbox\",\n          checked: status === 'COMPLETE',\n          onChange: updateTaskStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(BaseTitle, {\n      children: /*#__PURE__*/_jsxDEV(TitleRow, {\n        children: [/*#__PURE__*/_jsxDEV(Text.Subtitle, {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n          type: \"checkbox\",\n          checked: status === 'COMPLETE',\n          onChange: updateTaskStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }, this)), description && /*#__PURE__*/_jsxDEV(BaseContent, {\n      children: /*#__PURE__*/_jsxDEV(Text.Text, {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/components/TaskCard/taskCard.tsx"],"names":["React","useRouter","styled","ApolloClient","gql","InMemoryCache","Flex","Checkbox","Text","BaseCard","div","BaseContent","BaseTitle","CompleteTitle","TitleRow","Row","TaskCard","data","id","name","description","status","router","refreshData","replace","asPath","updateTaskStatus","client","uri","cache","udpatedStatus","mutate","mutation","variables"],"mappings":"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","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport { TaskCardDataFragment } from '../../typedDocumentNodes';\nimport { ApolloClient, gql, InMemoryCache } from '@apollo/client';\nimport { Flex, Checkbox, Text } from '../../primitives';\nexport interface TaskCardProps {\n  data: TaskCardDataFragment;\n}\n\nconst BaseCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  padding: 0 0 32px;\n  margin: 20px;\n  margin-left: 100px;\n  width: 300px;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.05), 0 0px 40px rgba(0, 0, 0, 0.08);\n  border-radius: 20px;\n  background-color: #0a1944;\n`;\n\nconst BaseContent = styled.div`\n  padding: 10px;\n  color: #97b4ff;\n`;\n\nconst BaseTitle = styled.div`\n  padding: 10px;\n  color: #ffffff;\n  font-weight: bold;\n  font-size: 1.5em;\n  border-bottom: 2px solid #8916ff;\n  margin: 5px;\n`;\n\nconst CompleteTitle = styled(BaseTitle)`\n  color: #97b4ff;\n  border-bottom: 2px solid #97b4ff;\n`;\n\nconst TitleRow = styled(Flex.Row)`\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const TaskCard: FunctionComponent<TaskCardProps> = ({ data }) => {\n  const { id, name, description, status } = data;\n  const router = useRouter();\n  function refreshData() {\n    router.replace(router.asPath);\n  }\n  async function updateTaskStatus() {\n    const client = new ApolloClient({\n      uri: 'http://localhost:3000/graphql',\n      cache: new InMemoryCache(),\n    });\n    const udpatedStatus = status === 'COMPLETE' ? 'TODO' : 'COMPLETE';\n    await client.mutate({\n      mutation: gql`\n        mutation updateTaskStatus($id: Int!, $status: String!) {\n          updateTask(id: $id, status: $status) {\n            name\n            description\n            status\n          }\n        }\n      `,\n      variables: { id: id, status: udpatedStatus },\n    });\n\n    refreshData();\n  }\n  return (\n    <BaseCard>\n      {name &&\n        (status === 'COMPLETE' ? (\n          <CompleteTitle>\n            <TitleRow>\n              <Text.Subtitle>{name}</Text.Subtitle>\n              <Checkbox\n                type=\"checkbox\"\n                checked={status === 'COMPLETE'}\n                onChange={updateTaskStatus}\n              />\n            </TitleRow>\n          </CompleteTitle>\n        ) : (\n          <BaseTitle>\n            <TitleRow>\n              <Text.Subtitle>{name}</Text.Subtitle>\n              <Checkbox\n                type=\"checkbox\"\n                checked={status === 'COMPLETE'}\n                onChange={updateTaskStatus}\n              />\n            </TitleRow>\n          </BaseTitle>\n        ))}\n      {description && (\n        <BaseContent>\n          <Text.Text>{description}</Text.Text>\n        </BaseContent>\n      )}\n    </BaseCard>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}