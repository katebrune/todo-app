{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/pages/index.tsx\";\nimport React from 'react';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { filter } from 'graphql-anywhere';\nimport moment from 'moment';\nimport { TaskList } from '../components/TaskList/taskList';\nimport { HomePageDocument, TaskListDataFragmentDoc } from '../typedDocumentNodes';\nimport { Flex } from '../primitives';\n\nconst Home = ({\n  data\n}) => {\n  function getCurrentDate() {\n    const date = moment();\n    return `${date.format('dddd')} ${date.format('MMMM')} ${date.date()}, ${date.year()}`;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Flex.Col, {\n    children: [/*#__PURE__*/_jsxDEV(Flex.Row, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getCurrentDate()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      data: filter(TaskListDataFragmentDoc, data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getServerSideProps = async () => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache()\n  });\n  const res = await client.query({\n    query: HomePageDocument\n  });\n  return {\n    props: res\n  };\n};\nexport default Home;","map":{"version":3,"sources":["/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/pages/index.tsx"],"names":["React","ApolloClient","InMemoryCache","filter","moment","TaskList","HomePageDocument","TaskListDataFragmentDoc","Flex","Home","data","getCurrentDate","date","format","year","getServerSideProps","client","uri","cache","res","query","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SACEC,gBADF,EAGEC,uBAHF,QAIO,uBAJP;AAKA,SAASC,IAAT,QAAqB,eAArB;;AAMA,MAAMC,IAA6B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAClD,WAASC,cAAT,GAAkC;AAChC,UAAMC,IAAI,GAAGR,MAAM,EAAnB;AACA,WAAQ,GAAEQ,IAAI,CAACC,MAAL,CAAY,MAAZ,CAAoB,IAAGD,IAAI,CAACC,MAAL,CAC/B,MAD+B,CAE/B,IAAGD,IAAI,CAACA,IAAL,EAAY,KAAIA,IAAI,CAACE,IAAL,EAAY,EAFjC;AAGD;;AAED,sBACE,QAAC,IAAD,CAAM,GAAN;AAAA,4BACE,QAAC,IAAD,CAAM,GAAN;AAAA,6BACE;AAAA,kBAAIH,cAAc;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAER,MAAM,CAACI,uBAAD,EAA0BG,IAA1B;AAAtB;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAhBD;;AAkBA,OAAO,MAAMK,kBAAkB,GAAG,YAAY;AAC5C,QAAMC,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AAC9BgB,IAAAA,GAAG,EAAE,+BADyB;AAE9BC,IAAAA,KAAK,EAAE,IAAIhB,aAAJ;AAFuB,GAAjB,CAAf;AAKA,QAAMiB,GAAG,GAAG,MAAMH,MAAM,CAACI,KAAP,CAA4B;AAC5CA,IAAAA,KAAK,EAAEd;AADqC,GAA5B,CAAlB;AAIA,SAAO;AAAEe,IAAAA,KAAK,EAAEF;AAAT,GAAP;AACD,CAXM;AAaP,eAAeV,IAAf","sourcesContent":["import React from 'react';\nimport { NextPage } from 'next';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { filter } from 'graphql-anywhere';\nimport moment from 'moment';\nimport { TaskList } from '../components/TaskList/taskList';\nimport {\n  HomePageDocument,\n  HomePageQuery,\n  TaskListDataFragmentDoc,\n} from '../typedDocumentNodes';\nimport { Flex } from '../primitives';\n\ninterface HomePageProps {\n  data: HomePageQuery;\n}\n\nconst Home: NextPage<HomePageProps> = ({ data }) => {\n  function getCurrentDate(): string {\n    const date = moment();\n    return `${date.format('dddd')} ${date.format(\n      'MMMM',\n    )} ${date.date()}, ${date.year()}`;\n  }\n\n  return (\n    <Flex.Col>\n      <Flex.Row>\n        <p>{getCurrentDate()}</p>\n      </Flex.Row>\n      <TaskList data={filter(TaskListDataFragmentDoc, data)} />\n    </Flex.Col>\n  );\n};\n\nexport const getServerSideProps = async () => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache(),\n  });\n\n  const res = await client.query<HomePageQuery>({\n    query: HomePageDocument,\n  });\n\n  return { props: res };\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}