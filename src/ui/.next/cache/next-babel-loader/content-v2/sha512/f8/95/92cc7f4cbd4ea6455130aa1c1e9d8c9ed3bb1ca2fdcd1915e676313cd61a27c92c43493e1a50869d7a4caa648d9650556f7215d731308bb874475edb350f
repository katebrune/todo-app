{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/pages/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  justify-content: space-between;\\n  align-items: center;\\n  padding: 10px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport { useMutation } from '@apollo/client';\nimport { filter } from 'graphql-anywhere';\nimport moment from 'moment';\nimport styled from 'styled-components';\nimport Modal, { ModalProvider } from 'styled-react-modal';\nimport { TaskList } from '../components/TaskList/taskList';\nimport { TaskListDataFragmentDoc } from '../typedDocumentNodes';\nimport { Flex, Text, Button } from '../primitives';\nimport { NewTaskForm } from '../components/NewTaskForm/newTaskForm';\nimport { ADD_NEW_TASK } from '../mutations/addNewTask';\nvar HeaderRow = styled(Flex.Row)(_templateObject());\n_c = HeaderRow;\n\nvar Home = function Home(_ref) {\n  _s();\n\n  var data = _ref.data;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var router = useRouter();\n\n  var _useMutation = useMutation(ADD_NEW_TASK),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addNewTask = _useMutation2[0];\n\n  function refreshData() {\n    router.replace(router.asPath);\n  }\n\n  function getCurrentDate() {\n    var date = moment();\n    return \"\".concat(date.format('dddd'), \" \").concat(date.format('MMMM'), \" \").concat(date.date(), \", \").concat(date.year());\n  }\n\n  function submitNewTask(_x) {\n    return _submitNewTask.apply(this, arguments);\n  }\n\n  function _submitNewTask() {\n    _submitNewTask = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setOpen(false);\n              _context.next = 3;\n              return addNewTask({\n                variables: {\n                  name: values.name,\n                  description: values.description\n                }\n              });\n\n            case 3:\n              refreshData();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _submitNewTask.apply(this, arguments);\n  }\n\n  function toggleModal() {\n    setOpen(!open);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ModalProvider, {\n    children: [/*#__PURE__*/_jsxDEV(Flex.Col, {\n      children: [/*#__PURE__*/_jsxDEV(HeaderRow, {\n        children: [/*#__PURE__*/_jsxDEV(Text.Subtitle, {\n          children: getCurrentDate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: function onClick() {\n            return setOpen(true);\n          },\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(TaskList, {\n        data: filter(TaskListDataFragmentDoc, data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: open,\n      onBackgroundClick: toggleModal,\n      children: /*#__PURE__*/_jsxDEV(NewTaskForm, {\n        onSubmit: submitNewTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Home, \"StBMyuRHQKeTcV3TL21pedCTWkY=\", false, function () {\n  return [useRouter, useMutation];\n});\n\n_c2 = Home;\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HeaderRow\");\n$RefreshReg$(_c2, \"Home\");","map":{"version":3,"sources":["/Users/kbrune/Documents/learning/nestjs-nextjs/app/src/ui/pages/index.tsx"],"names":["React","useRouter","useMutation","filter","moment","styled","Modal","ModalProvider","TaskList","TaskListDataFragmentDoc","Flex","Text","Button","NewTaskForm","ADD_NEW_TASK","HeaderRow","Row","Home","data","useState","open","setOpen","router","addNewTask","refreshData","replace","asPath","getCurrentDate","date","format","year","submitNewTask","values","variables","name","description","toggleModal"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NextPage } from 'next';\nimport { useRouter } from 'next/router';\nimport { ApolloClient, InMemoryCache, useMutation } from '@apollo/client';\nimport { filter } from 'graphql-anywhere';\nimport moment from 'moment';\nimport styled from 'styled-components';\nimport Modal, { ModalProvider } from 'styled-react-modal';\nimport { TaskList } from '../components/TaskList/taskList';\nimport {\n  HomePageDocument,\n  HomePageQuery,\n  TaskListDataFragmentDoc,\n} from '../typedDocumentNodes';\nimport { Flex, Text, Button } from '../primitives';\nimport {\n  NewTaskForm,\n  NewTaskFormValues,\n} from '../components/NewTaskForm/newTaskForm';\nimport { ADD_NEW_TASK } from '../mutations/addNewTask';\n\ninterface HomePageProps {\n  data: HomePageQuery;\n}\n\nconst HeaderRow = styled(Flex.Row)`\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n`;\n\nconst Home: NextPage<HomePageProps> = ({ data }) => {\n  const [open, setOpen] = React.useState(false);\n  const router = useRouter();\n  const [addNewTask] = useMutation(ADD_NEW_TASK);\n\n  function refreshData() {\n    router.replace(router.asPath);\n  }\n\n  function getCurrentDate(): string {\n    const date = moment();\n    return `${date.format('dddd')} ${date.format(\n      'MMMM',\n    )} ${date.date()}, ${date.year()}`;\n  }\n\n  async function submitNewTask(values: NewTaskFormValues) {\n    setOpen(false);\n    await addNewTask({\n      variables: {\n        name: values.name,\n        description: values.description,\n      },\n    });\n    refreshData();\n  }\n\n  function toggleModal() {\n    setOpen(!open);\n  }\n\n  return (\n    <ModalProvider>\n      <Flex.Col>\n        <HeaderRow>\n          <Text.Subtitle>{getCurrentDate()}</Text.Subtitle>\n          <Button onClick={() => setOpen(true)}>Add Task</Button>\n        </HeaderRow>\n        <TaskList data={filter(TaskListDataFragmentDoc, data)} />\n      </Flex.Col>\n      <Modal isOpen={open} onBackgroundClick={toggleModal}>\n        <NewTaskForm onSubmit={submitNewTask} />\n      </Modal>\n    </ModalProvider>\n  );\n};\n\nexport const getServerSideProps = async () => {\n  const client = new ApolloClient({\n    uri: 'http://localhost:3000/graphql',\n    cache: new InMemoryCache(),\n  });\n\n  const res = await client.query<HomePageQuery>({\n    query: HomePageDocument,\n  });\n\n  return { props: res };\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}